var drag_item_state = {
  current: {
    id: undefined,
    x: undefined,
    y: undefined
  },
  last: {
    id: undefined,
    x: undefined,
    y: undefined
  }
};
function update_item_state(id, x, y) {
  drag_item_state.current.id = id;
  drag_item_state.current.x = x;
  drag_item_state.current.y = y;
}

$('form.new_message').on('ajax:success', function(){
  $(this).find("#message_content").val("");
});
$(function(){
  if ($('.messages').size() > 0) {

    var pusher = new Pusher('<%= Pusher.key %>');

    var pusher_connection_status = "initialized";
    pusher.connection.bind('connected', function() {
      if (pusher_connection_status == "disconnected") {
        refresh_channel();
      }
      pusher_connection_status = "connected";
      set_connection_status(true);
    });
    pusher.connection.bind('disconnected', function() {
      pusher_connection_status = "disconnected";
      set_connection_status(false);
    });
    pusher.connection.bind('unavailable', function() {
      pusher_connection_status = "disconnected";
      set_connection_status(false);
    });

    var channel = pusher.subscribe($('.messages').data('channel'));
    channel.bind('pusher:subscription_succeeded', function(members) {
      members.each(function(member) {
        add_member(member.id, member.info);
      });
    });
    channel.bind('pusher:member_added', function(member) {
      add_member(member.id, member.info);
    });
    channel.bind('pusher:member_removed', function(member) {
      remove_member(member.id, member.info);
    });
    channel.bind('message_added', function(data) {
      var $message = $('<li><span class="time"> ' + data.time +
        ' </span><span class="username' +
        ($('#my_name').text() == data.message.user_name ? ' myself' : '') +
        '"> (' + data.message.user_name + ') </span><span class="content"> ' +
         data.message.content + ' </span></li>').hide();
      $('ul.messages').prepend($message);
      $message.fadeIn();
      if ($('#my_name').text() != data.message.user_name) {
        webkit_notifications(data.message.user_name, data.message.content);
      }
    });
    channel.bind('item_move', item_move);
    channel.bind('client-item_drag', item_move);

    /* class名に"draggable"を持つオブジェクトをドラッグ可能にする */
    var $draggable = $('.draggable');
    $draggable.draggable({
      /* ドラッグ可能範囲はid名"table_area"内のみ */
      containment: '#table_area',
      drag: function(e, ui) {
        update_item_state(ui.helper.data('item-id'), ui.position.left, ui.position.top);
      }
    });
    if ($draggable.size() > 0) {
      setInterval(function(){
        if(drag_item_state.current.id !== drag_item_state.last.id ||
            drag_item_state.current.x !== drag_item_state.last.x ||
            drag_item_state.current.y !== drag_item_state.last.y){
          drag_item_state.last.id = drag_item_state.current.id;
          drag_item_state.last.x = drag_item_state.current.x;
          drag_item_state.last.y = drag_item_state.current.y;

          channel.trigger('client-item_drag', {
            user_id: channel.members.me.id,
            item_id: drag_item_state.last.id,
            position: {
              left: drag_item_state.last.x,
              top: drag_item_state.last.y
            }
          });
        }
      }, 300);
    }
    $('#table_area').droppable({
      accept: '.draggable',
        drop: function(e, ui) {
          var dropItem = ui.draggable;
          var itemId = dropItem.data('item-id');
          $.ajax({type: "POST", url: "/items/" + itemId + "/event/move",
                  data: {position_x: ui.position.left, position_y: ui.position.top}});
        }
    });
    /* 縦スクロール禁止 */
    $(document).bind("touchmove", function() {
      event.preventDefault();
    });
  }
  check_webkit_notifications();
});


function item_move(data) {
  var my_user_id = $("ul.members>li.myself").data("member-id");
  if (data.user_id != my_user_id) {
    $(".draggable[data-item-id='" + data.item_id + "']").animate({
        top: data.position.top + 'px',
        left: data.position.left + 'px'
    }, {
      duration: 300
    });
  }
}

function set_connection_status(is_online) {
  var $connection_status = $(".connection_status .status");
  if (is_online) {
      $connection_status.removeClass("offline").addClass("online");
      $connection_status.text("オンライン");
  } else {
      $connection_status.removeClass("online").addClass("offline");
      $connection_status.text("オフライン");
      $("ul.members").children().remove();
  }
}

function check_webkit_notifications() {
  if(typeof window.webkitNotifications == 'undefined'){return;}
  var permission = webkitNotifications.checkPermission();
  if (permission != 0) {
    var $button = $('<input type="button" class="btn btn-small" value="デスクトップへの通知を許可" id="webkit_notifications_button">');
    $('p.logout').append($button);

    $('#webkit_notifications_button').bind('click', function(e){
      webkitNotifications.requestPermission();
    });
  }
}

function webkit_notifications(user_name, content) {
  if(typeof window.webkitNotifications == 'undefined'){return;}
  var permission = webkitNotifications.checkPermission();
  switch(permission){
    case 0:
      var notification = webkitNotifications.createNotification('', user_name, content);
      var notification_display_time = 10* 1000;
      notification.ondisplay = function(){
        setTimeout(function(){
          notification.cancel();
        }, notification_display_time);
      };
      notification.show();
      break;
    case 1:
      webkitNotifications.requestPermission();
      break;
    case 2:
      break;
  }
}

function refresh_channel() {
  $("ul.members").children().remove();
  $.getJSON(window.location.pathname+".json", function (json) {
    var messages = json.messages;
    if (messages) {
      var $messages = $("ul.messages");
      $messages.children().remove();
      for (var i=0; i<messages.length; i++) {
        var message = messages[i];
        var d = new Date(message.updated_at);
        var message_date_hour = (d.getHours() < 10 ? '0' : '') + d.getHours();
        var message_date_minites = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();
        var message_date = message_date_hour + ":" + message_date_minites;
        var is_message_mine = ($('#my_name').text() == message.user_name ? true : false);
        var username_class = "username" + (is_message_mine ? " myself" : "");
        $messages.append('<li><span class="time">'+message_date+'</span><span class="'+username_class+'">('+message.user_name+')</span><span class="content">'+message.content+'</span></li>');
      }
    }
  });
}

function add_member(member_id, member_info) {
  var $members = $('.members');
  if ($members.find("li[data-member-id='"+member_id+"']").size() > 0) { return; }
  var $member = $('<li>' + member_info.name + '</li>');
  $member.attr('data-member-id', member_id);
  if ($('#my_name').text() == member_info.name) {
    $member.addClass('myself');
  }
  $members.append($member);
  var $members_li = $members.find('li');
  $members.html($members_li.sort(function(a,b) {
    return $(a).text() < $(b).text() ? -1 : 1;
  }));
}
function remove_member(member_id, member_info) {
  var $members = $('.members li');
  $members.each(function() {
    var $member = $(this);
    if ($member.text() == member_info.name) {
      $member.remove();
    }
  });
}
